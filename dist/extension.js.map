{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://less-variable-helper/./src/runtimes/complement.ts","webpack://less-variable-helper/./src/runtimes/config-init.ts","webpack://less-variable-helper/./src/runtimes/file.ts","webpack://less-variable-helper/./src/runtimes/helper.ts","webpack://less-variable-helper/./src/runtimes/init.ts","webpack://less-variable-helper/external commonjs \"vscode\"","webpack://less-variable-helper/external node-commonjs \"fs\"","webpack://less-variable-helper/external node-commonjs \"path\"","webpack://less-variable-helper/external node-commonjs \"readline\"","webpack://less-variable-helper/webpack/bootstrap","webpack://less-variable-helper/./src/extension.ts"],"sourcesContent":["import Helper from \"./helper\";\nimport * as vscode from \"vscode\";\n\nexport default class InputComplement {\n  config?: Helper;\n  context?: vscode.ExtensionContext;\n  constructor({ config, context }: { config: Helper; context: vscode.ExtensionContext }) {\n    this.config = config;\n    this.context = context;\n    this.runComplement();\n    this.provideVaribalesCompletionItems = this.provideVaribalesCompletionItems.bind(this);\n    this.provideClassCompletionItems = this.provideClassCompletionItems.bind(this);\n  }\n  runComplement() {\n    const context = this.context;\n    if (!context) return;\n    this.pushInput();\n  }\n  pushInput() {\n    this.pushVaribales();\n    this.pushClassName();\n  }\n  pushVaribales() {\n    const t = this;\n    const provideCompletionItems = (document: vscode.TextDocument, position: vscode.Position) =>\n      t.provideVaribalesCompletionItems.call(t, document, position);\n    const provider = vscode.languages.registerCompletionItemProvider(\n      \"less\",\n      {\n        provideCompletionItems,\n      },\n      \"@\" // triggered whenever a '@' is being typed\n    );\n    this.context?.subscriptions?.push(provider);\n  }\n  provideVaribalesCompletionItems(document: vscode.TextDocument, position: vscode.Position) {\n    // get all text until the `position` and check if it reads `console.`\n    // and if so then complete if `log`, `warn`, and `error`\n    const linePrefix = document.lineAt(position).text.substr(0, position.character);\n    if (!linePrefix.endsWith(\"@\")) {\n      return undefined;\n    }\n    const complements = Object.entries(this.config?.variableMap || {}).map((i) => {\n      // a completion item that can be accepted by a commit character,\n      // the `commitCharacters`-property is set which means that the completion will\n      // be inserted and then the character will be typed.\n      const isColor =\n        i[1].startsWith(\"#\") || i[1].toLowerCase().startsWith(\"rgb\") || i[1].toLowerCase().startsWith(\"hls\");\n      const type = isColor ? vscode.CompletionItemKind.Color : vscode.CompletionItemKind.Variable;\n      const completion = new vscode.CompletionItem(`@${i[0]}`, type);\n      completion.detail = i[1];\n      completion.documentation = i[1];\n      return completion;\n    });\n    return [...complements];\n  }\n  pushClassName() {\n    const t = this;\n    const provideCompletionItems = (document: vscode.TextDocument, position: vscode.Position) =>\n      t.provideClassCompletionItems.call(t, document, position);\n    const provider = vscode.languages.registerCompletionItemProvider(\n      \"less\",\n      {\n        provideCompletionItems,\n      },\n      \".\" // triggered whenever a '.' is being typed\n    );\n    this.context?.subscriptions.push(provider);\n  }\n  provideClassCompletionItems(document: vscode.TextDocument, position: vscode.Position) {\n    const t = this;\n    // get all text until the `position` and check if it reads `console.`\n    // and if so then complete if `log`, `warn`, and `error`\n    const linePrefix = document.lineAt(position).text.substr(0, position.character);\n    if (!linePrefix.endsWith(\".\")) {\n      return undefined;\n    }\n    const complements =\n      t.config?.classes?.map((i) => {\n        const CompletionItemLabel: vscode.CompletionItemLabel = {\n          label: `.${i.class}`,\n        };\n        const complement = new vscode.CompletionItem(CompletionItemLabel, vscode.CompletionItemKind.Variable);\n        complement.detail = i.detail;\n        return complement;\n      }) || [];\n    return [...complements];\n  }\n}\n","import * as vscode from \"vscode\";\nimport { getFile } from \"./file\";\nimport Helper from \"./helper\";\n\nexport interface CONFIG {\n  alias: { [k: string]: string };\n  exclude: string[];\n  entry: string;\n}\n\n// 获取基础配置信息\nconst configFetch = async (context: vscode.ExtensionContext): Promise<CONFIG | null> => {\n  const configArr = [getFile(\".lessvhrc\"), getFile(\"lessvhrc.js\"), getFile(\"lessvhrc.json\")];\n  let config: null | CONFIG = null;\n  for (const i of configArr) {\n    let conf = await i;\n    if (conf === null) {\n      continue;\n    } else {\n      try {\n        config = JSON.parse(conf);\n      } catch (e) {\n        console.log(\"初始化文件非JSON格式\");\n      }\n      break;\n    }\n  }\n  return config;\n};\n\n// 配置初始化\nconst initialyze = async (context: vscode.ExtensionContext) => {\n  const config = await configFetch(context);\n  if (config === null) {\n    return;\n  }\n  const instance = new Helper({ config });\n  await instance.init();\n  return instance;\n};\n\nexport default initialyze;\n","import * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\nimport * as readline from \"readline\";\n\nexport const getFile = (_path: string) => {\n  return new Promise<any>((resolve) => {\n    try {\n      return fs.readFile(getRealFilePath(_path), \"utf8\", (err, data) => {\n        if (err) {\n          resolve(null);\n        }\n        resolve(data);\n      });\n    } catch (e) {\n      resolve(null);\n    }\n  });\n};\n\nexport const readLine = async (_path: string, cb?: (c: string) => Promise<any>) => {\n  const fileStream = fs.createReadStream(getRealFilePath(_path));\n\n  const rl = readline.createInterface({\n    input: fileStream,\n    crlfDelay: Infinity,\n  });\n  for await (const line of rl) {\n    if (cb) {\n      await cb(line);\n    }\n  }\n  return;\n};\n\nexport const getRealFilePath = (_path: string) => {\n  try {\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders) return \"\";\n    return path.resolve(workspaceFolders[0].uri.fsPath, _path);\n  } catch (e) {\n    return \"\";\n  }\n};\n","import { CONFIG } from \"./config-init\";\nimport { readLine } from \"./file\";\n\nexport default class Helper {\n  alias: { [k: string]: string } = {};\n  entry: string | string[] = \"\";\n  variableMap: { [k: string]: string } = {};\n  holdingStr = \"\";\n  classes: { class: string; detail: string }[] = [];\n  constructor({ config }: { config: CONFIG }) {\n    const { alias = {}, entry = \"\" } = config;\n    if (Object.prototype.toString.call(alias) === \"[object Object]\") {\n      this.alias = alias;\n    }\n    if (typeof entry === \"string\" && entry.endsWith(\".less\")) {\n      this.entry = entry;\n    }\n    if (Array.isArray(entry)) {\n      this.entry = entry.filter((i) => {\n        if (typeof i === \"string\" && i.endsWith(\".less\")) {\n          return true;\n        }\n        return false;\n      });\n    }\n    if (!this.entry) {\n      return;\n    }\n  }\n  async init() {\n    if (Array.isArray(this.entry)) {\n      this.entry = this.entry.map((i) => this.aliasReplace(i));\n    } else {\n      this.entry = this.aliasReplace(this.entry);\n    }\n    await this.initialyze();\n  }\n  /**\n   * 替换别名\n   * @param str string 原始string\n   * @returns 替换别名结果\n   */\n  aliasReplace(str: string) {\n    const alias = Object.keys(this.alias);\n    if (alias.length === 0) {\n      return str;\n    }\n    for (const alia of alias) {\n      str = str.replace(alia, this.alias[alia]);\n    }\n    return str;\n  }\n  /**\n   * 解析文件\n   */\n  async initialyze() {\n    if (Array.isArray(this.entry)) {\n      this.entry = this.entry.map((i) => this.aliasReplace(i));\n      for (const i of this.entry) {\n        await this.processFile(i);\n      }\n    } else {\n      await this.processFile(this.entry);\n    }\n  }\n  /**\n   * 处理文件\n   * @param file string 文件路径\n   */\n  async processFile(file: string) {\n    await readLine(file, async (lineContent) => {\n      await this.analyze(lineContent);\n    });\n  }\n  /**\n   * 分析less内容\n   * @param content string 内容\n   */\n  async analyze(content: string) {\n    switch (true) {\n      case content.startsWith(\"@import\"):\n        await this.initialyzeChildFile(content);\n        break;\n      case content.startsWith(\".\"):\n        this.initialyzeClassName(content);\n        break;\n      case content.startsWith(\"@\"):\n        this.initialyzeVariable(content);\n        break;\n      default:\n        if (this.holdingStr) {\n          this.initialyzeClassName(content);\n        }\n        break;\n    }\n  }\n  /**\n   * 处理引入文件\n   * @param content string 内容\n   */\n  async initialyzeChildFile(content: string) {\n    const fileReg = /[\"'](.+.less)['\"]/gi;\n    const result = fileReg.exec(content);\n    if (result) {\n      const file = this.aliasReplace(result[1]);\n      await this.processFile(file);\n    }\n  }\n  /**\n   * 处理class name\n   * @param content string 内容\n   */\n  initialyzeClassName(content: string) {\n    if (content.startsWith(\".\") && this.holdingStr) {\n      const classNameReg = /.([\\w-]+)([\\s\\S]+)?/gi;\n      const result = classNameReg.exec(this.holdingStr);\n      if (result) {\n        const className = result[1] ?? \"\";\n        const detail = result[2] ?? \"\";\n        if (className) {\n          this.classes.push({ class: className, detail });\n          this.holdingStr = content;\n        }\n      }\n    } else if (!content.startsWith(\".\") && this.holdingStr) {\n      this.holdingStr += `\\r${content}`;\n    } else if (content.startsWith(\".\") && !this.holdingStr) {\n      this.holdingStr += `${content}`;\n    }\n  }\n  /**\n   * 处理变量\n   * @param content string 内容\n   */\n  initialyzeVariable(content: string) {\n    const variableReg = /@([\\w]+)\\s?:\\s?([^;]+);/gi;\n    const result = variableReg.exec(content);\n    let variable, value;\n    if (result) {\n      variable = result[1];\n      value = result[2];\n      this.variableMap[variable] = value;\n    }\n  }\n}\n","import initialyze from \"./config-init\";\nimport InputComplement from \"./complement\";\nimport * as vscode from \"vscode\";\n\nconst init = async (context: vscode.ExtensionContext) => {\n  const instance = await initialyze(context);\n  if (instance) {\n    const variableHelper = new InputComplement({\n      config: instance,\n      context,\n    });\n    return variableHelper;\n  }\n  return null;\n};\nexport default init;\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"readline\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\nimport init from \"./runtimes/init\";\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  // Use the console to output diagnostic information (console.log) and errors (console.error)\n  // This line of code will only be executed once when your extension is activated\n  console.log('\"less-variable-helper\" is now active!');\n  init(context);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["constructor","config","context","this","runComplement","provideVaribalesCompletionItems","bind","provideClassCompletionItems","pushInput","pushVaribales","pushClassName","t","provider","vscode","languages","registerCompletionItemProvider","provideCompletionItems","document","position","call","subscriptions","push","lineAt","text","substr","character","endsWith","Object","entries","variableMap","map","i","type","startsWith","toLowerCase","CompletionItemKind","Color","Variable","completion","CompletionItem","detail","documentation","classes","CompletionItemLabel","label","class","complement","async","configArr","getFile","conf","JSON","parse","e","console","log","configFetch","instance","init","_path","Promise","resolve","fs","readFile","getRealFilePath","err","data","readLine","cb","fileStream","createReadStream","rl","readline","createInterface","input","crlfDelay","Infinity","line","workspaceFolders","workspace","path","uri","fsPath","alias","entry","holdingStr","prototype","toString","Array","isArray","filter","aliasReplace","initialyze","str","keys","length","alia","replace","processFile","file","lineContent","analyze","content","initialyzeChildFile","initialyzeClassName","initialyzeVariable","result","exec","className","variable","value","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}